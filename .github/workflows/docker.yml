name: Publish Docker Image

on:
  workflow_dispatch:
  release:
    types: [published]
  push:
    branches:
      - main
      - develop
      - new-ui          # adicionada branch new-ui
    tags:
      - v*

permissions:
  contents: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: codeleaks/quepasa
  NODE_ENV: production
  APP_ENV: production
  QUEPASA_CONTAINER_NAME: "quepasa"
  QUEPASA_HOST_NAME: "quepasa"
  QUEPASA_MEMORY_LIMIT: 512M
  QUEPASA_EXTERNAL_PORT: 31000
  QUEPASA_INTERNAL_PORT: 31000
  WEBAPIPORT: 31000
  QUEPASA_BASIC_AUTH_USER: ${{ secrets.DOCKER_USERNAME }}
  QUEPASA_BASIC_AUTH_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  MIGRATIONS: './migrations'
  WEBSOCKETSSL: false

jobs:
  push_main:
    if: github.ref == 'refs/heads/main'
    name: Push Docker + GitHub Release (condicional)
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo (full history)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 1) Build & push apenas com `latest`
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=schedule
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          flavor: |
            latest=true

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image (latest)
        uses: docker/build-push-action@v4.1.0
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # 2) SÃ³ prossiga se for push na main
      - name: Extract old QpVersion
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: extract_old
        run: |
          OLD=$(git show HEAD~1:src/models/qp_defaults.go \
            | grep -Po '(?<=const QpVersion = ")[^"]+')
          echo "old=$OLD" >> $GITHUB_OUTPUT

      - name: Extract new QpVersion
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: extract_new
        run: |
          NEW=$(grep -Po '(?<=const QpVersion = ")[^"]+' src/models/qp_defaults.go)
          echo "new=$NEW" >> $GITHUB_OUTPUT
          echo "VERSION=$NEW" >> $GITHUB_ENV

      # 3) Se QpVersion mudou, crie tag, Release e tagueie a imagem
      - name: Configure Git for tagging
        if: ${{ steps.extract_old.outputs.old != steps.extract_new.outputs.new }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create & push Git tag ${{ env.VERSION }}
        if: ${{ steps.extract_old.outputs.old != steps.extract_new.outputs.new }}
        run: |
          git tag -a "${{ env.VERSION }}" -m "Release ${{ env.VERSION }}"
          git push origin "${{ env.VERSION }}"

      - name: Create GitHub Release ${{ env.VERSION }}
        if: ${{ steps.extract_old.outputs.old != steps.extract_new.outputs.new }}
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.VERSION }}
          name: "Release ${{ env.VERSION }}"
          body: |
            ðŸ“¦ Imagem Docker `${{ env.IMAGE_NAME }}:${{ env.VERSION }}` publicada!
            Commit: ${{ github.sha }}

      - name: Build & push Docker image with version tag
        if: ${{ steps.extract_old.outputs.old != steps.extract_new.outputs.new }}
        uses: docker/build-push-action@v4.1.0
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

  push_develop:
    if: github.ref == 'refs/heads/develop'
    name: Build & Push Dev Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Extract QpVersion
        id: extract_version
        run: |
          VERSION=$(grep -Po '(?<=const QpVersion = ")[^"]+' src/models/qp_defaults.go)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image (dev)
        uses: docker/build-push-action@v4.1.0
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-latest
          

  push_new_ui:
    # 1) roda *apÃ³s* o sync e portanto apÃ³s o push_main
    needs: sync_new_ui
    name: Build & Push newâ€‘ui Docker Images
    runs-on: ubuntu-latest

    steps:
      # 2) faz checkout da branch newâ€‘ui jÃ¡ atualizada pelo sync_new_ui
      - name: Checkout newâ€‘ui
        uses: actions/checkout@v3
        with:
          ref: new-ui
          fetch-depth: 0

      # 3) extrai a QpVersion que acabou de chegar da main
      - name: Extract QpVersion
        id: extract_newui
        run: |
          VERSION=$(grep -Po '(?<=const QpVersion = ")[^"]+' src/models/qp_defaults.go)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # 4) login no DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5) build & push das duas tags newâ€‘ui
      - name: Build & Push newâ€‘ui Images
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:newui-latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:newui-${{ env.VERSION }}

  sync_new_ui:
    if: github.ref == 'refs/heads/main'
    needs: push_main
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout completo da main
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Cria worktree para new-ui (ou reaproveita)
      - name: Create new-ui worktree
        run: |
          git fetch origin new-ui:new-ui || git fetch origin main:new-ui
          git worktree add new-ui new-ui || true

      # 3) Sincroniza excluindo .tmpl, .css e .js
      - name: Sync changes from main to new-ui
        continue-on-error: true
        run: |
          rsync -av --delete \
            --exclude='new-ui/' \
            --exclude='*.tmpl' \
            --exclude='*.css' \
            --exclude='*.js' \
            ./ new-ui/

      # 4) Commit & Force-Push do novo conteÃºdo para new-ui
      - name: Force QpVersion from main into new-ui
        run: |
          cp src/models/qp_defaults.go new-ui/src/models/qp_defaults.go

      - name: Commit & Push to new-ui
        run: |
          pushd new-ui
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Sync from main (excluindo *.tmpl, *.css, *.js) + versÃ£o da main"
            git push --force-with-lease origin HEAD:new-ui
          else
            echo "âœ… Nenhuma mudanÃ§a para sincronizar em new-ui"
          fi
          popd

      # 5) Extrai a versÃ£o atual de QpVersion em new-ui
      - name: Extract QpVersion from new-ui
        id: extract_newui_version
        run: |
          grep -Po '(?<=const QpVersion = ")[^"]+' new-ui/src/models/qp_defaults.go \
            | tee version.txt
          echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      # 6) Login no DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 7) Build & Push Docker image com tag newui-${VERSION} e latest
      - name: Build and push new-ui Docker image
        uses: docker/build-push-action@v4.1.0
        with:
          context: new-ui
          file: new-ui/docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:newui-${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:newui-latest
